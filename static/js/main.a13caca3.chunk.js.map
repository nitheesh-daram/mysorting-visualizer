{"version":3,"sources":["components/Navbar/Navbar.js","components/Algos/Algos.js","components/Simulator/Simulator.js","Sorting/Sorting.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","class","style","color","fontSize","marginTop","float","role","aria-label","mergesort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","Simulator","props","state","comparisions","swaps","speed","this","resetarray","min","max","size","document","getElementById","value","index","random","setState","arrayBars","getElementsByClassName","comparison","comparision","swap","setTimeout","backgroundColor","comp","innerHTML","temp","height","animation","normalsort","animate","bubblesort","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","newHeight","algo","alert","f","map","e","key","width","id","name","defaultValue","type","onChange","step","onClick","start","Component","Sorting","bannerColor","octoColor","direction","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a13caca3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Sorting Visualizer\n      </a>\n      <ul class=\"navbar-nav\">\n        <li\n          className=\"nav-item active\"\n          style={{ color: \"white\", fontSize: \"80%\", marginTop: \"10%\",float:\"right\" }}\n        >\n          - Made with{\" \"}\n          <span role=\"img\" aria-label=\"\">\n            ❤️\n          </span>{\" \"}\n          by Nitheesh Daram\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","function normalsort(array) {\n  let animations = [];\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      let animation = {};\n      animation.comparision = [i, j];\n      animation.swap = [i, i];\n      if (array[i] > array[j]) {\n        animation.swap = [j, i];\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      animations.push(animation);\n    }\n  }\n  return animations;\n}\n\nfunction bubblesort(array) {\n  let animations = [];\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      let animation = {};\n      animation.comparision = [j, j + 1];\n      animation.swap = [j, j];\n      if (array[j] > array[j + 1]) {\n        animation.swap = [j, j + 1];\n        [array[j + 1], array[j]] = [array[j], array[j + 1]];\n      }\n      animations.push(animation);\n    }\n  }\n  return animations;\n}\n\nfunction mergesort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport { normalsort, bubblesort, mergesort };\n","import React, { Component } from \"react\";\nimport \"./Simulator.css\";\nimport { normalsort } from \"../Algos/Algos\";\nimport { bubblesort } from \"../Algos/Algos\";\nimport { mergesort } from \"../Algos/Algos\";\n\nexport default class Simulator extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      array: [],\n      comparisions: 0,\n      swaps: 0,\n      speed: 1,\n    };\n  }\n\n  componentDidMount() {\n    this.resetarray();\n  }\n\n  resetarray() {\n    const array = [];\n    const comparisions = 0;\n    const swaps = 0;\n    // Array size\n    let size = document.getElementById(\"size\").value;\n    for (let index = 0; index < size; index++) {\n      array.push(randomIntfromRange(10, 400));\n    }\n    this.setState({ array, comparisions, swaps });\n  }\n\n  animate(animations) {\n    let speed = this.state.speed;\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let index = 0; index < animations.length; index++) {\n      let comparison = animations[index].comparision;\n      let swap = animations[index].swap;\n      setTimeout(() => {\n        arrayBars[comparison[1]].style.backgroundColor = \"orange\";\n        arrayBars[comparison[0]].style.backgroundColor = \"red\";\n        let comp = document.getElementById(\"comp\");\n        // eslint-disable-next-line\n        this.state.comparisions = this.state.comparisions + 1;\n        comp.innerHTML = \"Comparisions : \" + this.state.comparisions;\n      }, index * speed);\n      setTimeout(() => {\n        let temp = arrayBars[swap[1]].style.height;\n        arrayBars[swap[1]].style.height = arrayBars[swap[0]].style.height;\n        arrayBars[swap[0]].style.height = temp;\n        if (swap[0] !== swap[1]) {\n          // eslint-disable-next-line\n          this.state.swaps = this.state.swaps + 1;\n          let comp = document.getElementById(\"swap\");\n          comp.innerHTML = \"Swaps : \" + this.state.swaps;\n        }\n      }, index * speed);\n      setTimeout(() => {\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        arrayBars[comparison[1]].style.backgroundColor = \"white\";\n        arrayBars[comparison[0]].style.backgroundColor = \"white\";\n      }, (index + 1) * speed);\n    }\n  }\n\n  normalsort() {\n    const animations = normalsort(this.state.array);\n    this.animate(animations);\n  }\n  bubblesort() {\n    const animations = bubblesort(this.state.array);\n    this.animate(animations);\n  }\n\n  mergesort() {\n    const animations = mergesort(this.state.array);\n    let speed = this.state.speed;\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? \"red\" : \"white\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n          let comp = document.getElementById(\"comp\");\n          // eslint-disable-next-line\n          this.state.comparisions = this.state.comparisions + 1;\n          comp.innerHTML = \"Comparisions : \" + this.state.comparisions;\n        }, i * speed);\n      } else {\n        setTimeout(() => {\n          // eslint-disable-next-line\n          this.state.swaps = this.state.swaps + 1;\n          let comp = document.getElementById(\"swap\");\n          comp.innerHTML = \"Swaps : \" + this.state.swaps;\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * speed);\n      }\n    }\n  }\n  speed() {\n    let temp = document.getElementById(\"speed\").value;\n    temp = temp === 1 ? temp : temp - 1;\n    temp = temp === 0 ? temp + 1 : temp;\n    // eslint-disable-next-line\n    this.state.speed = temp;\n    document.getElementById(\"speed-data\").innerHTML =\n      \"Animation Speed : \" + temp + \"ms\";\n  }\n  start() {\n    const algo = document.getElementById(\"algo\").value;\n    if (algo === \"1\") {\n      this.normalsort();\n    } else if (algo === \"2\") {\n      this.bubblesort();\n    } else if (algo === \"3\") {\n      this.mergesort();\n    } else {\n      alert(\"select algo!\");\n    }\n  }\n\n  render() {\n    const array = this.state.array;\n    let f = 100 / array.length;\n    return (\n      <>\n        <section className=\"whole_container\">\n          <div className=\"simulator\">\n            <div className=\"array-box\">\n              {array.map((e, i) => {\n                return (\n                  <div\n                    className=\"array-bar\"\n                    key={i}\n                    style={{ height: e + \"px\", width: f + \"%\" }}\n                  ></div>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"controls\">\n            <div className=\"title\">\n              <h1>Sorting Visualizer</h1>\n            </div>\n            <div className=\"real-controls\">\n              <label>Sorting Algorithm : </label> <span></span>\n              <select id=\"algo\" name=\"algo\" defaultValue=\"3\">\n                <option value=\"1\">Naive Sort</option>\n                <option value=\"2\">Bubble Sort</option>\n                <option value=\"3\">Merge Sort</option>\n              </select>\n              <br />\n              <label>Adjust Size : </label> <br />\n              <input\n                id=\"size\"\n                type=\"range\"\n                min=\"50\"\n                max=\"500\"\n                defaultValue=\"150\"\n                onChange={() => this.resetarray()}\n              ></input>\n              <br />\n              <label>Adjust Speed : </label> <br />\n              <input\n                id=\"speed\"\n                type=\"range\"\n                min=\"1\"\n                max=\"11\"\n                defaultValue=\"1\"\n                step=\"5\"\n                onChange={() => this.speed()}\n              ></input>\n            </div>\n            <hr />\n            <div className=\"data\">\n              <div className=\"sizeandspeed\">\n                <h6 className=\"data-single\" id=\"arraySize\">\n                  Array Size : {this.state.array.length}{\" \"}\n                </h6>\n                <h6 className=\"data-single\" id=\"speed-data\">\n                  Animation Speed : {this.state.speed}ms\n                </h6>\n              </div>\n              <div className=\"compandswap\">\n                <h6 className=\"data-single\" id=\"comp\">\n                  Comparisions : {this.state.comparisions}\n                </h6>\n                <h6 className=\"data-single\" id=\"swap\">\n                  Swaps : {this.state.swaps}\n                </h6>\n              </div>\n            </div>\n            <hr />\n            <div className=\"buttons\">\n              <button\n                className=\"btn new btn-primary\"\n                onClick={() => this.resetarray()}\n              >\n                Generate New array\n              </button>\n              <span />\n              <button\n                className=\"btn start btn-success\"\n                onClick={() => this.start()}\n              >\n                Start\n              </button>\n            </div>\n            <div className=\"algo-info\"></div>\n          </div>\n        </section>\n      </>\n    );\n  }\n}\n\nfunction randomIntfromRange(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n// eslint-disable-next-line\nfunction arraysareequal(jssorted, algosorted) {\n  if (jssorted.length !== algosorted.length) return false;\n  for (let index = 0; index < jssorted.length; index++) {\n    if (jssorted[index] !== algosorted[index]) return false;\n  }\n  return true;\n}\n","import React from \"react\";\nimport Navbar from \"../components/Navbar/Navbar\";\nimport Simulator from \"../components/Simulator/Simulator\";\nimport GithubCorner from \"react-github-corner\";\nconst Sorting = () => {\n  return (\n    <div>\n      <Navbar />\n      <GithubCorner\n        href=\"https://github.com/nitheesh-daram/Sorting-visualizer\"\n        bannerColor=\"#fff\"\n        octoColor=\"#000\"\n        size={80}\n        direction=\"right\"\n      />\n      <section className=\"whole_container\">\n        <Simulator />\n      </section>\n    </div>\n  );\n};\n\nexport default Sorting;\n","import React from \"react\";\nimport \"./App.css\";\nimport Sorting from \"./Sorting/Sorting\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sorting></Sorting>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}